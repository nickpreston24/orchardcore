@using CodeMechanic.Types
@using Newtonsoft.Json
@using OrchardCore.Models
@using OrchardCore.Services
@model List<CalendarEvent>
@inject ICalendarEventService calendar
@{


    var calendar_events = @Model
        // .Dump("events")
        ;


    if (@calendar_events.Count == 0)
    {
        // This is useful on the refresh
        calendar_events = (await calendar.GetAll()).ToList();
    }

    // Maps to the format that Schedule understands
    var mapped_events = calendar_events.Select(ev => ev
        .Map(e => new
        {
            id = e.id,
            title = e.event_name,
            start = e.start_date,
            allDay = true
        }))
        .ToArray();


    //https://chrisfrew.in/blog/serializing-and-deserializing-to-iso-8601-in-dotnet/
    string json = JsonConvert.SerializeObject(mapped_events);
    // Console.WriteLine("json :>> " + json);

    // We must treat the events as Raw HTML after serialization:
    var data = @Html.Raw(@json);


}


<section id="calendar_container" x-data="setup_orchard_calendar()">

    <pre>Current View Mode: <span x-text="current_calendar_mode"></span> </pre>
    <pre>Render Mode: <span x-text="fullcallendar_render_mode"></span> </pre>

    <div class="join join-vertical lg:join-horizontal">

        <template x-for="item in calendar_modes">
            <button name="item.name" x-on:click="pick_me(item.name)" class="btn join-item" x-text="item.name">...</button>
        </template>

    </div>


    <div id="calendar">
    </div>

    <script>
        document.addEventListener("DOMContentLoaded", generate_calendar(@data)); 
    </script>

</section>

<script >
    function setup_orchard_calendar(){      
        
       return {
         current_calendar_mode: 'Week',
         get fullcallendar_render_mode(){
            let found = this.calendar_modes.find(m=>m.name === this.current_calendar_mode);
            return found?.view;
         },
         calendar_modes: [
              { name: "Month", view: 'dayGridMonth'},
              { name:  "Week", view: 'dayGridWeek'},
              { name:  "Day's Time Grid", view: 'timeGridDay'}, // Not working
              { name:  "Week's Time Grid", view: 'timeGridWeek'}, // Not working
              { name:  "Week's List", view: 'listWeek'},
              { name:  "Month's List", view: 'listMonth'},
              { name:  "Week's Agenda", view: 'agendaWeek'}, // Not working
              { name:  "Day's Agenda", view: 'agendaDay'},
              // dayGridMonth,timeGridWeek,timeGridDay,listMonth
            ],
            pick_me(name){
                let selected_mode  = name;
                console.log('element: ' +  selected_mode);
                localStorage.setItem('current_calendar_mode', selected_mode);
                this.current_calendar_mode = selected_mode;
                
                let view_name = this.fullcallendar_render_mode;
                // re-render:
                generate_calendar(@data, view_name)
            }   
        }
 }
</script>
